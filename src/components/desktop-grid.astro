---
interface Props {
  rooms: {
    image: string;
    title: string;
    description: string;
    players?: string;
    idealPlayer?: string;
    ageRecommendation?: string;
    ctaLink?: string;
  }[];
    id?: string;
}

const { rooms, id = "escape-room-slider" } = Astro.props;
---

<!-- Desktop Grid -->
<div class="hidden md:grid grid-cols-2 lg:grid-cols-3 gap-6 mt-8" id={id + "-desktop"}>
  {rooms.map((room, index) => (
    <div class="room-card bg-secondary-bg rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 flex flex-col h-full">
      <div class="image-container relative pb-[56.25%] overflow-hidden flex-shrink-0">
        <img 
          src={room.image} 
          alt={`Preview of ${room.title} escape room`} 
          class="absolute inset-0 w-full h-full object-cover transition-transform hover:scale-[1.05]"
          loading={index === 0 ? "eager" : "lazy"}
        />
      </div>
      <div class="p-6 flex flex-col flex-grow">
        <h3 class="text-2xl font-bold mb-3">{room.title}</h3>
        <div class="flex-grow">
          <p class="mb-4 text-base leading-relaxed">{room.description}</p>
          
          <div class="flex flex-wrap gap-5 mb-6 text-sm">
            {room.players && (
              <div class="flex items-center bg-secondary/10 px-3 py-1.5 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                <span>{room.players}</span>
              </div>
            )}
            
            {room.idealPlayer && (
              <div class="flex items-center bg-secondary/10 px-3 py-1.5 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span>{room.idealPlayer}</span>
              </div>
            )}
            
            {room.ageRecommendation && (
              <div class="flex items-center bg-secondary/10 px-3 py-1.5 rounded-full">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4M12 16h.01" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" />
                </svg>
                <span>{room.ageRecommendation}</span>
              </div>
            )}
          </div>
        </div>
        
        <div class="mt-auto flex flex-col gap-3">
          {room.ctaLink && (
            <button 
              class="inline-block bg-accent hover:bg-accent-hover font-bold py-2.5 px-8 rounded-full transition-colors duration-200 text-center w-full"
          onclick="document.getElementById('shopPlaceholder')?.scrollIntoView({ behavior: 'smooth' , margin: '100px'});"
            >
              Book Now
            </button>
          )}
          
          {room.ctaLink && (
            <a 
              href={room.ctaLink}
              class="inline-block bg-transparent border-2 border-accent hover:bg-accent/10 text-accent font-bold py-2.5 px-8 rounded-full transition-colors duration-200 text-center w-full"
            >
              More Info
            </a>
          )}
        </div>
      </div>
    </div>
  ))}
</div>
