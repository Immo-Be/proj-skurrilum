---
import {localeSlugs, C, type Locale} from '../../configuration';
import {getLocaleFromUrl} from '../../i18n/i18n';
import {getLocalizedGamePath} from '../../utils/game-localization';

export interface Props {
  currentLocale?: string;
  currentPath?: string;
}

const currentLocale = getLocaleFromUrl(Astro.url);
const currentPath = Astro.url.pathname;

function getLocalePath(targetLocale: string) {
  // No longer using the middleware route for language switching
  // Instead, implement the localization logic directly here

  // Check if this is a game path that needs special handling
  const gamePathResult = getLocalizedGamePath(currentPath, targetLocale);
  if (gamePathResult) {
    // We found a matching game path, return it
    return gamePathResult + Astro.url.search;
  }

  // Standard path handling for non-game routes
  const pathSegments = currentPath.split('/').filter(Boolean);
  let newPath = '';

  // Check if we're switching to the default locale
  if (targetLocale === C.DEFAULT_LOCALE) {
    // For default locale, don't add the locale prefix
    if (localeSlugs.includes(pathSegments[0] as Locale)) {
      // Remove the locale segment if it exists
      pathSegments.shift();
      newPath = pathSegments.length > 0 ? '/' + pathSegments.join('/') : '/';
    } else {
      // Already at root path without locale
      newPath = currentPath;
    }
  } else {
    // For non-default locales, always include the locale prefix
    if (localeSlugs.includes(pathSegments[0] as Locale)) {
      // Replace existing locale
      pathSegments[0] = targetLocale;
      newPath = '/' + pathSegments.join('/');
    } else {
      // Add locale prefix
      newPath = '/' + targetLocale + currentPath;
    }
  }

  // Preserve trailing slash if present
  if (currentPath.endsWith('/') && !newPath.endsWith('/')) {
    newPath += '/';
  }

  return newPath + Astro.url.search;
}

// Map locales to their full names
const localeNames = {
  de: 'Deutsch',
  en: 'English',
};
---

<div
  class="language-switcher relative ml-4"
  id="language-switcher-container"
>
  <!-- Mobile view: always show all options side by side -->
  <div class="md:hidden flex gap-2 items-center">
    {
      localeSlugs.map(locale => (
        <a
          href={getLocalePath(locale)}
          class={`block px-2 py-1 text-sm font-medium uppercase ${locale === currentLocale ? 'text-accent font-bold' : ''}`}>
          {locale}
        </a>
      ))
    }
  </div>

  <!-- Desktop view: dropdown on hover -->
  <div class="hidden md:block relative w-24" style="position: relative;">
    <div
      id="language-dropdown-button"
      class="flex cursor-pointer items-center text-base font-medium"
      aria-expanded="false"
    >
      <span class="uppercase">{currentLocale}</span>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
        class="ml-1 h-4 w-4 transition-transform duration-150"
        id="dropdown-arrow"
      >
        <path
          fill-rule="evenodd"
          d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
          clip-rule="evenodd"></path>
      </svg>
    </div>

    <div
      id="language-dropdown-menu"
      class="bg-primary-bg text-primary-fg absolute right-0 z-50 mt-2 hidden w-32 rounded py-2 opacity-0 shadow-md transition-opacity duration-150"
      style="transition: opacity 150ms ease-in-out;"
    >
      {
        localeSlugs
          .filter(locale => locale !== currentLocale) // Only show languages that are not currently selected
          .map(locale => (
            <a
              href={getLocalePath(locale)}
              class="hover:bg-accent block px-4 py-2 text-sm">
              {localeNames[locale]}
            </a>
          ))
      }
    </div>
  </div>
</div>

<script is:inline>
  //document.addEventListener('astro:page-load', () => setupLanguageSwitcher());
  document.addEventListener('astro:after-swap', () => setupLanguageSwitcher());

  // Also run immediately for initial page load
  (function () {
    setupLanguageSwitcher();
  })();

  function setupLanguageSwitcher() {
    // Only set up the dropdown for desktop view
    const desktopContainer = document.querySelector('#language-switcher-container .hidden.md\\:block');
    
    if (!desktopContainer) {
      return;
    }
    
    const button = document.getElementById('language-dropdown-button');
    const menu = document.getElementById('language-dropdown-menu');

    if (!button || !menu) {
      return;
    }

    // Check if we've already set up this element to avoid duplicate listeners
    if (desktopContainer.dataset.initialized === 'true') {
      return;
    }

    desktopContainer.dataset.initialized = 'true';

    const arrow = document.getElementById('dropdown-arrow');

    // Show menu on hover
    desktopContainer.addEventListener('mouseenter', function () {
      button.setAttribute('aria-expanded', 'true');
      if (arrow) arrow.style.transform = 'rotate(180deg)';
      showMenu();
    });

    // Hide menu when mouse leaves the container
    desktopContainer.addEventListener('mouseleave', function () {
      button.setAttribute('aria-expanded', 'false');
      if (arrow) arrow.style.transform = 'rotate(0deg)';
      hideMenu();
    });

    function showMenu() {
      menu.style.cssText =
        'display: block !important; opacity: 1 !important; visibility: visible !important; pointer-events: auto !important;';

      // Ensure visibility with a small delay to allow CSS transitions
      setTimeout(() => {
        // If still not visible, try alternative approach
        if (
          window.getComputedStyle(menu).display === 'none' ||
          window.getComputedStyle(menu).visibility === 'hidden' ||
          menu.getBoundingClientRect().height === 0
        ) {
          const buttonRect = button.getBoundingClientRect();
          menu.style.position = 'absolute';
          menu.style.top = buttonRect.bottom + 'px';
          menu.style.right = '0';
          menu.style.cssText +=
            'display: block !important; z-index: 9999 !important;';
        }
      }, 50);
    }

    function hideMenu() {
      menu.style.opacity = '0';
      // Use timeout to allow fade-out animation
      setTimeout(() => {
        if (button.getAttribute('aria-expanded') === 'false') {
          menu.style.display = 'none';
        }
      }, 150);
    }
  }
</script>
