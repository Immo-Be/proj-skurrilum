---
interface Props {
  rooms: {
    image: string;
    title: string;
    description: string;

    players?: string;
    idealPlayer?: string;
    ageRecommendation?: string;
    ctaLink?: string;

  }[];
  id?: string;
}

const { rooms, id = "escape-room-slider" } = Astro.props;
---

<div class="slider-container w-full overflow-hidden" id={id}>
  <div class="slider-track flex transition-transform duration-300">
    {rooms.map((room, index) => (
      <div class="slider-slide w-full flex-shrink-0 p-4">
        <div class="slide-content bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden cursor-pointer transition-transform hover:scale-[1.02]" data-link={room.ctaLink}>
          <div class="image-container relative pb-[56.25%] overflow-hidden">
            <img 
              src={room.image} 
              alt={`Preview of ${room.title} escape room`} 
              class="absolute inset-0 w-full h-full object-cover"
              loading={index === 0 ? "eager" : "lazy"}
            />
          </div>
          <div class="p-5">
            <h3 class="text-2xl font-bold mb-2">{room.title}</h3>
            <p class="text-gray-700 dark:text-gray-300 mb-4">{room.description}</p>
            
            <div class="flex flex-wrap gap-4 mb-4">

              {room.players && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  <span>{room.players}</span>
                </div>
              )}
              
              {room.idealPlayer && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>{room.idealPlayer}</span>
                </div>
              )}
              
              {room.ageRecommendation && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-4.2 1.4" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 9h.01M15 9h.01M9.5 13.5L12 16l2.5-2.5" />
                  </svg>
                  <span>{room.ageRecommendation}</span>
                </div>
              )}
            </div>
            
            {room.ctaLink && (
              <a 
                href={room.ctaLink} 
                class="inline-block bg-primary hover:bg-primary-dark text-white font-bold py-2 px-6 rounded-full transition-colors duration-200"
              >
                Book Now
              </a>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <div class="slider-controls flex justify-center mt-4 gap-2">
    <button 
      class="slider-prev bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 rounded-full w-10 h-10 flex items-center justify-center focus:outline-none" 
      aria-label="Previous room"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <div class="slider-dots flex items-center gap-1"></div>
    
    <button 
      class="slider-next bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 rounded-full w-10 h-10 flex items-center justify-center focus:outline-none" 
      aria-label="Next room"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>
</div>

<script define:vars={{ id, rooms }}>
  document.addEventListener("DOMContentLoaded", () => {
    const sliderContainer = document.getElementById(id);
    if (!sliderContainer) return;
    
    const sliderTrack = sliderContainer.querySelector(".slider-track");
    const slides = sliderContainer.querySelectorAll(".slider-slide");
    const prevButton = sliderContainer.querySelector(".slider-prev");
    const nextButton = sliderContainer.querySelector(".slider-next");
    const dotsContainer = sliderContainer.querySelector(".slider-dots");
    
    const slideCount = slides.length;
    let currentSlide = 0;
    let startX = 0;
    let startY = 0;
    let isDragging = false;
    let dragStartTime = 0;
    let dragDistance = 0;
    
    // Create indicator dots
    for (let i = 0; i < slideCount; i++) {
      const dot = document.createElement("button");
      dot.classList.add("w-2", "h-2", "rounded-full", "bg-gray-300", "dark:bg-gray-600", "transition-all", "duration-200");
      dot.setAttribute("aria-label", `Go to slide ${i + 1}`);
      dot.addEventListener("click", () => goToSlide(i));
      dotsContainer.appendChild(dot);
    }
    
    const dots = dotsContainer.querySelectorAll("button");
    
    // Initialize
    updateSliderState();
    
    // Event listeners
    prevButton.addEventListener("click", goToPrevSlide);
    nextButton.addEventListener("click", goToNextSlide);
    
    // Touch events for swipe functionality
    sliderTrack.addEventListener("touchstart", handleDragStart);
    sliderTrack.addEventListener("touchmove", handleDragMove);
    sliderTrack.addEventListener("touchend", handleDragEnd);
    
    // Mouse events for desktop swipe
    sliderTrack.addEventListener("mousedown", handleDragStart);
    sliderTrack.addEventListener("mousemove", handleDragMove);
    sliderTrack.addEventListener("mouseup", handleDragEnd);
    sliderTrack.addEventListener("mouseleave", handleDragEnd);
    
    // Prevent default dragging behavior
    sliderTrack.addEventListener("dragstart", (e) => e.preventDefault());
    
    // Make cards clickable
    const slideContents = sliderContainer.querySelectorAll(".slide-content");
    slideContents.forEach(content => {
      content.addEventListener("click", (e) => {
        // Don't navigate if we're dragging (swiping)
        if (isDragging && Date.now() - dragStartTime > 100) return;
        
        // Don't navigate if clicking on the CTA button (it has its own link)
        if (e.target.closest('a')) return;
        
        const link = content.dataset.link;
        if (link) {
          window.location.href = link;
        }
      });
    });
    
    // Helper functions
    function updateSliderState() {
      const offset = -currentSlide * 100;
      sliderTrack.style.transform = `translateX(${offset}%)`;
      
      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentSlide) {
          dot.classList.remove("bg-gray-300", "dark:bg-gray-600");
          dot.classList.add("w-4", "bg-primary", "dark:bg-primary");
        } else {
          dot.classList.remove("w-4", "bg-primary", "dark:bg-primary");
          dot.classList.add("bg-gray-300", "dark:bg-gray-600");
        }
      });
      
      // Update button states
      prevButton.disabled = currentSlide === 0;
      nextButton.disabled = currentSlide === slideCount - 1;
      
      // Update ARIA attributes for accessibility
      slides.forEach((slide, index) => {
        slide.setAttribute("aria-hidden", index !== currentSlide);
        slide.setAttribute("tabindex", index === currentSlide ? "0" : "-1");
      });
      
      // Announce slide change to screen readers
      const liveRegion = document.querySelector(`#${id}-live-region`);
      if (!liveRegion) {
        const region = document.createElement("div");
        region.id = `${id}-live-region`;
        region.setAttribute("aria-live", "polite");
        region.className = "sr-only";
        sliderContainer.appendChild(region);
      }
      
      document.querySelector(`#${id}-live-region`).textContent = 
        `Showing slide ${currentSlide + 1} of ${slideCount}: ${rooms[currentSlide].title}`;
    }
    
    function goToSlide(index) {
      currentSlide = Math.max(0, Math.min(slideCount - 1, index));
      updateSliderState();
    }
    
    function goToNextSlide() {
      goToSlide(currentSlide + 1);
    }
    
    function goToPrevSlide() {
      goToSlide(currentSlide - 1);
    }
    
    function handleDragStart(e) {
      isDragging = true;
      dragStartTime = Date.now();
      dragDistance = 0;
      
      // Get the starting position
      startX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
      startY = e.type.includes('mouse') ? e.clientY : e.touches[0].clientY;
      
      // Remove transition to make dragging feel responsive
      sliderTrack.style.transition = "none";
    }
    
    function handleDragMove(e) {
      if (!isDragging) return;
      

      const currentX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
      const currentY = e.type.includes('mouse') ? e.clientY : e.touches[0].clientY;
      const diffX = currentX - startX;
      const diffY = currentY - startY;
      
      // Calculate absolute drag distance for click detection
      dragDistance = Math.sqrt(diffX * diffX + diffY * diffY);
      
      // Check if horizontal drag is more significant than vertical scroll
      // Only prevent default if we're primarily dragging horizontally
      if (Math.abs(diffX) > Math.abs(diffY)) {
        e.preventDefault();
        
        // Calculate drag position (limit the drag range)
        const dragOffset = (diffX / sliderContainer.offsetWidth) * 100;
        const totalOffset = -currentSlide * 100 + dragOffset;
        
        // Apply the transformation
        sliderTrack.style.transform = `translateX(${totalOffset}%)`;
      }
    }
    
    function handleDragEnd(e) {
      if (!isDragging) return;
      
      // Restore the transition
      sliderTrack.style.transition = "transform 300ms";
      
      const dragTime = Date.now() - dragStartTime;
      const threshold = 100; // pixels
      
      // Calculate final position
      let endX;
      if (e.type === 'touchend') {
        endX = e.changedTouches[0].clientX;
      } else {
        endX = e.clientX;
      }
      
      const diff = endX - startX;
      const containerWidth = sliderContainer.offsetWidth;
      
      // Determine if we should change slides based on drag distance and speed
      if (
        Math.abs(diff) > containerWidth * 0.2 || // Dragged more than 20% of slide width
        (Math.abs(diff) > threshold && dragTime < 300) // Fast swipe
      ) {
        if (diff > 0 && currentSlide > 0) {
          goToPrevSlide();
        } else if (diff < 0 && currentSlide < slideCount - 1) {
          goToNextSlide();
        } else {
          // Snap back if at the edges
          updateSliderState();
        }
      } else {
        // Snap back to current slide if the drag wasn't significant
        updateSliderState();
      }
      
      isDragging = false;
    }
    
    // Handle keyboard navigation
    sliderContainer.addEventListener("keydown", (e) => {
      if (e.key === "ArrowRight" || e.key === "ArrowDown") {
        goToNextSlide();
      } else if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
        goToPrevSlide();
      }
    });
    
    // Handle visibility changes and resize
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible") {
        updateSliderState();
      }
    });
    
    window.addEventListener("resize", updateSliderState);
    
    // Initialize with first slide active
    updateSliderState();
  });
</script>

<style>
  /* Prevent text selection during drag */
  .slider-track {
    user-select: none;
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .slider-slide {
      padding: 0.5rem;
    }
  }
  
  /* Disable button styles */
  .slider-prev:disabled,
  .slider-next:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>
