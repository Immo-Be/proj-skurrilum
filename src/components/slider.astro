---
interface Props {
  rooms: {
    image: string;
    title: string;
    description: string;
    players?: string;
    idealPlayer?: string;
    ageRecommendation?: string;
    ctaLink?: string;

  }[];
  id?: string;
}

const { rooms, id = "escape-room-slider" } = Astro.props;
---

<div class="slider-container w-full overflow-hidden md:hidden" id={id}>
  <div class="slider-track flex transition-transform duration-300">
    {rooms.map((room, index) => (
      <div class="slider-slide w-full flex-shrink-0 flex">
        <div class="slide-content bg-secondary-bg rounded-lg shadow-lg overflow-hidden cursor-pointer" data-link={room.ctaLink}>
          <div class="image-container relative pb-[56.25%] overflow-hidden">
            <img 
              src={room.image} 
              alt={`Preview of ${room.title} escape room`} 
              class="absolute inset-0 w-full h-full object-cover transition-transform hover:scale-[1.05]"
              loading={index === 0 ? "eager" : "lazy"}
            />
          </div>
          <div class="p-5 flex flex-col h-[calc(56.25%-12px)]">
            <h3 class="text-2xl font-bold mb-2">{room.title}</h3>
            <p class=" mb-4">{room.description}</p>
            
            <div class="flex flex-wrap gap-4 mb-4">

              {room.players && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  <span>{room.players}</span>
                </div>
              )}
              
              {room.idealPlayer && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span>{room.idealPlayer}</span>
                </div>
              )}
              
              {room.ageRecommendation && (
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4M12 16h.01" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" />
                  </svg>
                  <span>{room.ageRecommendation}</span>
                </div>
              )}
            </div>
            
          <div class="flex gap-4 -center justify-center">
            {room.ctaLink && (
            <a 
              href={room.ctaLink}
              class="inline bg-accent font-bold py-2 px-6 rounded-full transition-colors duration-200 w-fit"
            >
              More Info
            </a>
            )}
            {room.ctaLink && (
            <button
              onclick="document.getElementById('shopPlaceholder')?.scrollIntoView({ behavior: 'smooth' , margin: '100px'});"

              class="inline bg-accent font-bold py-2 px-6 rounded-full transition-colors duration-200 w-fit"
            >
              Book Now
            </button>
            )}
          </div>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <div class="slider-controls flex justify-center mt-4 gap-2">
    <button 
      class="slider-prev bg-accent hover:bg-accent-hover rounded-full w-10 h-10 flex items-center justify-center focus:outline-none" 
      aria-label="Previous room"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <div class="slider-dots flex items-center gap-1"></div>
    
    <button 
      class="slider-next bg-accent hover:bg-accent-hover rounded-full w-10 h-10 flex items-center justify-center focus:outline-none" 
      aria-label="Next room"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>
</div>

  <script define:vars={{ id, rooms }}>
  document.addEventListener('astro:page-load', () => {
    initSlider();
  });
  // Use both DOMContentLoaded and a direct execution path
  // This ensures the slider works regardless of when the script runs
  const initSlider = () => {
    const sliderContainer = document.getElementById(id);
    if (!sliderContainer) return;
    
    const sliderTrack = sliderContainer.querySelector(".slider-track");
    const slides = sliderContainer.querySelectorAll(".slider-slide");
    const prevButton = sliderContainer.querySelector(".slider-prev");
    const nextButton = sliderContainer.querySelector(".slider-next");
    const dotsContainer = sliderContainer.querySelector(".slider-dots");
    
    const slideCount = slides.length;
    let currentSlide = 0;
    let startX = 0;
    let startY = 0;
    let isDragging = false;
    let dragStartTime = 0;
    let dragDistance = 0;
    // clear dotsContainer
    dotsContainer.innerHTML =null  
    
    // Create indicator dots
    for (let i = 0; i < slideCount; i++) {
      const dot = document.createElement("button");
      dot.classList.add("w-2", "h-2", "rounded-full", "bg-dot", "transition-all", "duration-200");
      dot.setAttribute("aria-label", `Go to slide ${i + 1}`);
      dot.addEventListener("click", () => goToSlide(i));
      dotsContainer.appendChild(dot);
    }
    
    const dots = dotsContainer.querySelectorAll("button");
    
    // Initialize
    updateSliderState();
    
    // Event listeners
    prevButton.addEventListener("click", goToPrevSlide);
    nextButton.addEventListener("click", goToNextSlide);
    
    // Touch events for swipe functionality - attached to the container for better event capturing
    sliderContainer.addEventListener("touchstart", handleDragStart, { passive: true }); // Use passive for touchstart to not block scrolling
    sliderContainer.addEventListener("touchmove", handleDragMove, { passive: false }); // Non-passive to allow preventDefault when needed
    sliderContainer.addEventListener("touchend", handleDragEnd);
    
    // Mouse events for desktop swipe - attached to the container for better event capturing
    sliderContainer.addEventListener("mousedown", handleDragStart);
    window.addEventListener("mousemove", handleDragMove); // Use window to capture moves outside the slider
    window.addEventListener("mouseup", handleDragEnd);
    sliderContainer.addEventListener("mouseleave", handleDragEnd);
    
    // Prevent default dragging behavior
    sliderTrack.addEventListener("dragstart", (e) => e.preventDefault());
    
    // Make cards clickable
    const slideContents = sliderContainer.querySelectorAll(".slide-content");
    slideContents.forEach(content => {
      content.addEventListener("click", (e) => {
        // Don't navigate if we're dragging (swiping)
        if (isDragging || dragDistance > 10 || Date.now() - dragStartTime < 300) return;
        
        // Don't navigate if clicking on the CTA button (it has its own link)
        if (e.target.closest('a')) return;
        
        const link = content.dataset.link;
        if (link) {
          window.location.href = link;
        }
      });
    });
    
    // Helper functions
    function updateSliderState() {
      // Ensure the transition is applied for slide changes
      sliderTrack.style.transition = "transform 300ms";
      
      const offset = -currentSlide * 100;
      sliderTrack.style.transform = `translateX(${offset}%)`;
      
      // Reset drag state to ensure next swipe works correctly
      setTimeout(() => {
        isDragging = false;
        dragDistance = 0;
        startX = 0;
        startY = 0;
      }, 50);
      
      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentSlide) {
          dot.classList.remove("bg-dot");
          dot.classList.add("w-4", "bg-secondary-bg");
        } else {
          dot.classList.remove("w-4", "bg-secondary-bg");
          dot.classList.add("bg-dot");
        }
      });
      
      // Update button states
      prevButton.disabled = currentSlide === 0;
      nextButton.disabled = currentSlide === slideCount - 1;
      
      // Update ARIA attributes for accessibility
      slides.forEach((slide, index) => {
        slide.setAttribute("aria-hidden", index !== currentSlide);
        slide.setAttribute("tabindex", index === currentSlide ? "0" : "-1");
      });
      
      // Announce slide change to screen readers
      const liveRegion = document.querySelector(`#${id}-live-region`);
      if (!liveRegion) {
        const region = document.createElement("div");
        region.id = `${id}-live-region`;
        region.setAttribute("aria-live", "polite");
        region.className = "sr-only";
        sliderContainer.appendChild(region);
      }
      
      document.querySelector(`#${id}-live-region`).textContent = 
        `Showing slide ${currentSlide + 1} of ${slideCount}: ${rooms[currentSlide].title}`;
    }
    
    function goToSlide(index) {
      currentSlide = Math.max(0, Math.min(slideCount - 1, index));
      updateSliderState();
    }
    
    function goToNextSlide() {
      goToSlide(currentSlide + 1);
    }
    
    function goToPrevSlide() {
      goToSlide(currentSlide - 1);
    }
    
    function handleDragStart(e) {
      // Prevent any ongoing transitions
      sliderTrack.style.transition = "none";
      
      // Reset and initialize drag state
      isDragging = true;
      dragStartTime = Date.now();
      dragDistance = 0;
      
      // Get the starting position
      if (e.type.includes('mouse')) {
        startX = e.clientX;
        startY = e.clientY;
      } else if (e.touches && e.touches[0]) {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        // Don't prevent default on touchstart - allow scrolling to start normally
      }
    }
    
    function handleDragMove(e) {
      if (!isDragging) return;
      
      let currentX, currentY;
      
      if (e.type.includes('mouse')) {
        currentX = e.clientX;
        currentY = e.clientY;
      } else if (e.touches && e.touches[0]) {
        currentX = e.touches[0].clientX;
        currentY = e.touches[0].clientY;

      } else {
        return; // Exit if we can't get coordinates
      }
      
      const diffX = currentX - startX;
      const diffY = currentY - startY;
      
      // Calculate absolute drag distance for click detection
      dragDistance = Math.sqrt(diffX * diffX + diffY * diffY);
      
      // Only handle horizontal swipes - if movement is more horizontal than vertical
      // Use a higher threshold (1.2) to favor vertical scrolling over horizontal swiping
      const isHorizontalMovement = Math.abs(diffX) > Math.abs(diffY) * 1.2;
      
      // Only interfere with default scroll behavior if we're clearly doing a horizontal swipe
      if (isHorizontalMovement && e.cancelable) {
        if (dragDistance > 10) {
          e.preventDefault(); // Only prevent default once we're sure it's a deliberate horizontal swipe
        }
        
        // Calculate drag position with resistance at edges
        let dragOffset = (diffX / sliderContainer.offsetWidth) * 100;
        
        // Add resistance at the edges
        if ((currentSlide === 0 && diffX > 0) || 
            (currentSlide === slideCount - 1 && diffX < 0)) {
          dragOffset *= 0.4; // Add resistance at edges
        }
        
        const totalOffset = -currentSlide * 100 + dragOffset;
        
        // Apply the transformation
        sliderTrack.style.transform = `translateX(${totalOffset}%)`;
      }
    }
    
    function handleDragEnd(e) {
      if (!isDragging) return;
      
      // Restore the transition
      sliderTrack.style.transition = "transform 300ms";
      
      const dragTime = Date.now() - dragStartTime;
      const threshold = 80; // Reduced threshold to make swiping more sensitive
      
      // Calculate final position
      let endX;
      if (e.type === 'touchend' && e.changedTouches && e.changedTouches[0]) {
        endX = e.changedTouches[0].clientX;
      } else if (e.clientX) {
        endX = e.clientX;
      } else {
        endX = startX; // Fallback if we can't get valid coordinates
      }
      
      const diff = endX - startX;
      const containerWidth = sliderContainer.offsetWidth;
      
      // Flag to track if we actually moved to a new slide
      let slideChanged = false;
      
      // Calculate the final Y difference to detect if this was primarily a vertical scroll
      let endY;
      if (e.type === 'touchend' && e.changedTouches && e.changedTouches[0]) {
        endY = e.changedTouches[0].clientY;
      } else if (e.clientY) {
        endY = e.clientY;
      } else {
        endY = startY;
      }
      const diffY = endY - startY;
      
      // Only handle as a swipe if horizontal movement is more significant than vertical
      const isHorizontalMovement = Math.abs(diff) > Math.abs(diffY) * 1.2;
      
      if (isHorizontalMovement && (
        Math.abs(diff) > containerWidth * 0.15 || // Reduced from 20% to 15% of slide width
        (Math.abs(diff) > threshold && dragTime < 300) // Fast swipe
      )) {
        if (diff > 0 && currentSlide > 0) {
          goToPrevSlide();
          slideChanged = true;
        } else if (diff < 0 && currentSlide < slideCount - 1) {
          goToNextSlide();
          slideChanged = true;
        } else {
          // Snap back if at the edges
          updateSliderState();
        }
      } else {
        // Snap back to current slide if the drag wasn't significant or was more vertical
        updateSliderState();
      }
      
      // Reset dragging state
      isDragging = false;
      
      // If we changed slides, let the animation complete before allowing another drag
      if (slideChanged) {
        setTimeout(() => {
          dragDistance = 0;
          startX = 0;
          startY = 0;
        }, 300); // Match the transition duration
      } else {
        dragDistance = 0;
        startX = 0;
        startY = 0;
      }
      
      // Only prevent default if we actually handled this as a horizontal swipe
      // that resulted in a slide change
      if (isHorizontalMovement && e.cancelable) {
        e.preventDefault();
      }
    }
    
    // Handle keyboard navigation
    sliderContainer.addEventListener("keydown", (e) => {
      if (e.key === "ArrowRight" || e.key === "ArrowDown") {
        goToNextSlide();
      } else if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
        goToPrevSlide();
      }
    });
    
    // Handle visibility changes and resize
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible") {
        updateSliderState();
      }
    });
    
    window.addEventListener("resize", updateSliderState);
    
    // Initialize with first slide active
    updateSliderState();
  };
  
</script>

<style>
  /* Prevent text selection during drag */
  .slider-track {
    user-select: none;
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .slider-slide {
      padding-inline: 0.5rem;
    }
  }
  
  /* Disable button styles */
  .slider-prev:disabled,
  .slider-next:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>
