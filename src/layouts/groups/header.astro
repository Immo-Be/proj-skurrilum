---
import {getHomePermalink, trimSlash} from '../../utils/permalinks';
import {headerData} from '../../navigation';
import Logo from '../../components/ui/logo.astro';
import ToggleButton from '../../components/nav/toggle-icon.astro';
import Cta from '../../components/ui/cta.astro';
import LanguageSwitcher from '../../components/nav/language-switcher.astro';
import {useTranslations, getLocaleFromUrl} from '../../i18n/i18n';
import NavbarListItem from '../../components/nav/navbar-list-item.astro';

export interface Props {
  isSticky?: boolean;
  isFixed?: boolean;
}

const {isSticky = false, isFixed = false} = Astro.props;
const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
const locale = getLocaleFromUrl(Astro.url);
const {links} = headerData(locale);

const t = useTranslations(locale);

const navId = 'nav';
const toggleButtonId = 'toggleButton';
const headerId = 'header';
const fixedHeaderId = 'fixed';
---

<header
  transition:persist="header"
  class:list={[
    {
      sticky: isSticky,
      fixed: isFixed,
      relative: !isSticky && !isFixed,
    },
    'group top-0 z-40 mx-auto w-full flex-none border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky || isFixed ? {[`data-${fixedHeaderId}`]: true} : {}}
  id={headerId}
>
  <div
    class:list={[
      'text-default text-primary-fg-light group-[.expanded]:text-primary-fg group-[.expanded]:bg-primary-bg group-[.scroll]:bg-primary-bg group-[.scroll]:text-primary-fg group-[.scroll]:border-border text-[clamp(10rem, 20vw, 20rem)] relative h-full px-[var(--page-margin-inline)] group-[.scroll]:border-b md:flex md:items-center md:justify-between md:py-4',
    ]}
  >
    <div
      class:list={[
        'flex w-full items-center justify-between md:w-auto md:justify-center',
      ]}
    >
      <a class="flex items-center md:inline-block" href={getHomePermalink()}>
        <Logo customClass="" />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleButton id={toggleButtonId} />
      </div>
    </div>
    <nav
      id={navId}
      class="ml-12 hidden w-full items-center overflow-y-auto md:mx-5 md:flex md:w-auto md:justify-self-center md:overflow-visible"
      aria-label="Main navigation"
    >
      <ul
        class="flex w-full flex-col gap-4 overflow-x-hiddentracking-[0.01rem] md:w-auto md:flex-row md:justify-center md:gap-4 md:self-center"
      >
        {
          links.map(({text, href, links}) => (
            <NavbarListItem customClass={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    class="hover:text-link font-normal">
                    {text}
                  </button>
                  <ul class="dropdown-menu md:bg-page rounded-xs pl-4 font-medium opacity-90 drop-shadow-xl md:absolute md:hidden md:min-w-[200px] md:pl-0 md:backdrop-blur-md">
                    {links.map(({text: text2, href: href2}) => (
                      <li class="md:hover:bg-muted">
                        <a
                          class:list={[
                            'whitespace-no-wrap block px-5 py-2 first:rounded-t last:rounded-b',
                            {'aw-link-active': href2 === currentPath},
                          ]}
                          href={href2}>
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'cursor-pointer',
                    {'aw-link-active': href === currentPath},
                  ]}
                  href={href}>
                  {text}
                </a>
              )}
            </NavbarListItem>
          ))
        }
        <NavbarListItem
          class="transition-translate translate-x-[200px] duration-500"
          id="cta-element-header-desktop"
        >
          <Cta class="" label={`${t('cta.bookNow')}`} />
        </NavbarListItem>
      </ul>
      <LanguageSwitcher />
    </nav>
  </div>
</header>

<script is:inline define:vars={{navId, toggleButtonId, headerId, fixedHeaderId}}
>
  document.addEventListener('astro:after-swap', setupHeader);
  document.addEventListener('astro:before-swap', cleanupHeader);

  (function () {
    setupHeader();
  })();

  function setupHeader() {
    const nav = document.getElementById(navId);
    const toggle = document.getElementById(toggleButtonId);
    const header = document.getElementById(headerId);

    if (!nav || !toggle || !header) {
      console.warn('Nav elements not found. Please check');
      return;
    }

    toggle.addEventListener('click', () => {
      toggle.classList.toggle('expanded');
      header.classList.toggle('expanded');
      header.classList.toggle('h-screen');
      header.classList.toggle('bg-page');
      nav.classList.toggle('hidden');
    });

    function applyHeaderStylesOnScroll() {
      const headerElement = document.querySelector(
        `#header[data-${fixedHeaderId}]`
      );
      if (!headerElement) return;
      const shouldBeScrolled = window.scrollY > 60;
      headerElement.classList.toggle('scroll', shouldBeScrolled);
    }

    window.addEventListener('scroll', applyHeaderStylesOnScroll, {
      passive: true,
    });
    applyHeaderStylesOnScroll();
  }

  function cleanupHeader() {
    window.removeEventListener('scroll', applyHeaderStylesOnScroll);
  }
</script>
