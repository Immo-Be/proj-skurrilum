---
import {GamePaths} from '../pages/path';
---

<script is:inline define:vars={{GamePaths}}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  // Not ideal, but it works
  // We cannot use the middleware because we don't have access to window
  // as long as the routes are generated statically
  function redirect() {
    const url = new URL(window.location.href);

    // if the url contains ?lang=en, redirect to /en

    // Check for direct English game URLs without the locale prefix
    // Only do this check if we're at the default locale (meaning no locale was detected in the URL)
    const DEFAULT_LOCALE = 'de'; // Use the same default as in configuration

    // Check if we're not already on a localized path
    const pathSegments = url.pathname.split('/').filter(Boolean);
    if (pathSegments.length > 0 && !['de', 'en'].includes(pathSegments[0])) {
      const gameSlug = pathSegments[0];
      // Check if this slug matches any English game paths
      for (const [gameKey, translations] of Object.entries(GamePaths)) {
        // Check if the current path segment matches an English game slug
        if (translations.en?.game === gameSlug) {
          // We found a legacy English game URL without locale prefix
          // Redirect to the proper /en/game-slug version
          const correctPath = `/en/${gameSlug}${url.pathname.endsWith('/') ? '/' : ''}`;
          window.location.href = correctPath + url.search;
          return;
        }
      }
    }
  }

  const onLoad = function () {
    // Using allowed console method instead of console.log
    console.log('onLoad');
    //let lastKnownScrollPosition = window.scrollY;
    //let ticking = true;

    //attachEvent('#header nav', 'click', function () {
    //  document
    //    .querySelector('[data-aw-toggle-menu]')
    //    ?.classList.remove('expanded');
    //  document.body.classList.remove('overflow-hidden');
    //  document.getElementById('header')?.classList.remove('h-screen');
    //  document.getElementById('header')?.classList.remove('expanded');
    //  document.getElementById('header')?.classList.remove('bg-page');
    //  document.querySelector('#header nav')?.classList.add('hidden');
    //  document
    //    .querySelector('#header > div > div:last-child')
    //    ?.classList.add('hidden');
    //});
    //
    //attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
    //  elem.classList.toggle('expanded');
    //  document.body.classList.toggle('overflow-hidden');
    //  document.getElementById('header')?.classList.toggle('h-screen');
    //  document.getElementById('header')?.classList.toggle('expanded');
    //  document.getElementById('header')?.classList.toggle('bg-page');
    //  document.querySelector('#header nav')?.classList.toggle('hidden');
    //  document
    //    .querySelector('#header > div > div:last-child')
    //    ?.classList.toggle('hidden');
    //});

    //function applyHeaderStylesOnScroll() {
    //  const header = document.querySelector(
    //    '#header[data-sticky-or-fixed-header]'
    //  );
    //  if (!header) return;
    //  if (
    //    lastKnownScrollPosition > 60 &&
    //    !header.classList.contains('scroll')
    //  ) {
    //    header.classList.add('scroll');
    //  } else if (
    //    lastKnownScrollPosition <= 60 &&
    //    header.classList.contains('scroll')
    //  ) {
    //    header.classList.remove('scroll');
    //  }
    //  ticking = false;
    //}
    //applyHeaderStylesOnScroll();

    //document.addEventListener( 'scroll', function () {
    //  lastKnownScrollPosition = window.scrollY;
    //
    //  if (!ticking) {
    //    window.requestAnimationFrame(() => {
    //      applyHeaderStylesOnScroll();
    //    });
    //    ticking = true;
    //  }
    //});

    // Function to handle intersection changes
    // Does not re-execute on resize
    //{
    //  function handleIntersection(entry) {
    //    const cta = document.getElementById('cta-element-header-desktop');
    //
    //    if (window.innerWidth < 768) {
    //      cta.classList.remove('translate-x-[200px]');
    //      return;
    //    }
    //    entry.forEach(entry => {
    //      if (!entry.isIntersecting) {
    //        cta.classList.remove('translate-x-[200px]');
    //        // Add your custom logic here
    //      }
    //    });
    //  }
    //
    //  // Create an Intersection Observer
    //  const observer = new IntersectionObserver(handleIntersection, {
    //    root: null, // Use the viewport as the root
    //    rootMargin: '-78px 0px 0px 0px',
    //    threshold: '0', // Trigger when the element is fully out of view
    //  });
    //
    //  // Observe the target element
    //  const target = document.getElementById('cta-element-video');
    //  if (target) {
    //    observer.observe(target);
    //  }
    //}
  };
  //const onPageShow = function () {
  //  console.log("onPageShow")
  //  document.documentElement.classList.add('motion-safe:scroll-smooth');
  //  const elem = document.querySelector('[data-aw-toggle-menu]');
  //  if (elem) {
  //    elem.classList.remove('expanded');
  //  }
  //  document.body.classList.remove('overflow-hidden');
  //  document.getElementById('header')?.classList.remove('h-screen');
  //  document.getElementById('header')?.classList.remove('expanded');
  //  document.querySelector('#header nav')?.classList.add('hidden');
  //};

  window.onload = onLoad;
  //window.onpageshow = onPageShow;

  // Function to handle the parallax effect
  // function parallaxEffect() {
  //   //const parallaxElements = document.querySelectorAll('.parallax');
  //   //parallaxElements.forEach(element => {
  //   //  const speed = element.getAttribute('data-speed') || 0.5;
  //   //  const yPos = window.scrollY * speed;
  //   //  element.style.transform = `translateY(${yPos}px)`;
  //   //});
  // }

  // Initial call to set the position
  //parallaxEffect();
onLoad()
  // Add event listener for scroll
  // window.addEventListener('scroll', parallaxEffect);

  document.addEventListener('astro:after-swap', () => {
    onLoad();
    //onPageShow();
    //parallaxEffect();
    //redirect();
  });
</script>
