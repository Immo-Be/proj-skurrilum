---
// import { UI } from 'astrowind:config';
const UI: {
  theme: string;
} = {
  theme: 'light',
};
---

<script is:inline define:vars={{defaultTheme: UI.theme}}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  // Not ideal, but it works
  // We cannot use the middleware because we don't have access to window
  // as long as the routes are generated statically
  function redirect() {
    const url = new URL(window.location.href);

    // if the url contains ?lang=en, redirect to /en

    if (url.searchParams.get('lang') === 'en') {
      url.searchParams.delete('lang');

      window.location.href = url.href;
    }
  }

  //function applyTheme(theme) {
  //  if (theme === 'dark') {
  //    document.documentElement.classList.add('dark');
  //  } else {
  //    document.documentElement.classList.remove('dark');
  //  }
  //}

  //const initTheme = function () {
  //  if (
  //    (defaultTheme && defaultTheme.endsWith(':only')) ||
  //    (!localStorage.theme && defaultTheme !== 'system')
  //  ) {
  //    applyTheme(defaultTheme.replace(':only', ''));
  //  } else if (
  //    localStorage.theme === 'dark' ||
  //    (!('theme' in localStorage) &&
  //      window.matchMedia('(prefers-color-scheme: dark)').matches)
  //  ) {
  //    applyTheme('dark');
  //  } else {
  //    applyTheme('light');
  //  }
  //};
  //initTheme();
  //
  function attachEvent(selector, event, fn) {
    const matches =
      typeof selector === 'string'
        ? document.querySelectorAll(selector)
        : selector;
    if (matches && matches.length) {
      matches.forEach(elem => {
        elem.addEventListener(event, e => fn(e, elem), false);
      });
    }
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('#header nav', 'click', function () {
      document
        .querySelector('[data-aw-toggle-menu]')
        ?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document
        .querySelector('#header > div > div:last-child')
        ?.classList.add('hidden');
    });

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.getElementById('header')?.classList.toggle('expanded');
      document.getElementById('header')?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document
        .querySelector('#header > div > div:last-child')
        ?.classList.toggle('hidden');
    });

    //attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
    //  if (defaultTheme.endsWith(':only')) {
    //    return;
    //  }
    //  document.documentElement.classList.toggle('dark');
    //  localStorage.theme = document.documentElement.classList.contains('dark')
    //    ? 'dark'
    //    : 'light';
    //});

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    //const screenSize = window.matchMedia('(max-width: 767px)');
    //screenSize.addEventListener('change', function () {
    //  document
    //    .querySelector('[data-aw-toggle-menu]')
    //    ?.classList.remove('expanded');
    //  document.body.classList.remove('overflow-hidden');
    //  document.getElementById('header')?.classList.remove('h-screen');
    //  document.getElementById('header')?.classList.remove('expanded');
    //  document.getElementById('header')?.classList.remove('bg-page');
    //  document.querySelector('#header nav')?.classList.add('hidden');
    //  document
    //    .querySelector('#header > div > div:last-child')
    //    ?.classList.add('hidden');
    //});

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector(
        '#header[data-sticky-or-fixed-header]'
      );
      if (!header) return;
      if (
        lastKnownScrollPosition > 60 &&
        !header.classList.contains('scroll')
      ) {
        header.classList.add('scroll');
      } else if (
        lastKnownScrollPosition <= 60 &&
        header.classList.contains('scroll')
      ) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });

    // Function to handle intersection changes
    // Does not re-execute on resize
    {
      function handleIntersection(entry) {
      const cta = document.getElementById('cta-element-header-desktop');

      if (window.innerWidth < 768) {
        cta.classList.remove('translate-x-[200px]');
        return;
      }
        entry.forEach(entry => {
          if (!entry.isIntersecting) {
            cta.classList.remove('translate-x-[200px]');

            // Add your custom logic here
          } else {
            cta.classList.add('translate-x-[200px]');
            // Add your custom logic here
          }
        });
      }

      // Create an Intersection Observer
      const observer = new IntersectionObserver(handleIntersection, {
        root: null, // Use the viewport as the root
        rootMargin: '-78px 0px 0px 0px',
        threshold: '0', // Trigger when the element is fully out of view
      });

      // Observe the target element
      const target = document.getElementById('cta-element-video');
      if (target) {
        observer.observe(target);
      }
    }
  };
  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.getElementById('header')?.classList.remove('expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  // Function to handle the parallax effect
  function parallaxEffect() {
    const parallaxElements = document.querySelectorAll('.parallax');
    parallaxElements.forEach(element => {
      const speed = element.getAttribute('data-speed') || 0.5;
      const yPos = window.scrollY * speed;
      element.style.transform = `translateY(${yPos}px)`;
    });
  }

  function adjustCtaPosition() {
    const cta = document.getElementById('cta-bubble');
    console.log(cta, "cta");
    const footer = document.querySelector('.footer');
    const footerRect = footer.getBoundingClientRect();

    // Check if the shop element is

    if (footerRect.top < window.innerHeight) {
      cta.style.bottom = `${window.innerHeight - footerRect.top + 60}px`;
    } else {
      cta.style.bottom = '60px';
    }

    // Make the CTA disappear when the shop element is in the viewport
    const shop = document.querySelector('#venuedoo');
    // Function to handle intersection changes
    function handleIntersection(entries) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          cta.style.right = '-100%';
          // Add your custom logic here
        } else {
          cta.style.right = '0';
          // Add your custom logic here
        }
      });
    }

    // Create an Intersection Observer
    const observer = new IntersectionObserver(handleIntersection, {
      root: null, // Use the viewport as the root
      threshold: [0], // Trigger when 10% of the element is visible
    });

    // Observe the target element
    const target = shop;
    if (target) {
      observer.observe(target);
    }
  }

  window.addEventListener('scroll', adjustCtaPosition);
  window.addEventListener('resize', adjustCtaPosition);

  // Initial call to set the position
  adjustCtaPosition();
  // Initial call to set the position
  parallaxEffect();

  // Add event listener for scroll
  window.addEventListener('scroll', parallaxEffect);

  redirect();

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
    parallaxEffect();
    redirect();
  });
</script>
